name: Run Inference
description: |
  Loads Gemma3Model, generates text for multiple input prompts, and writes generation outputs to a JSON file.
  Accepts test_data_json as either (A) a JSON string (one-line) or (B) a path to a JSON file.
inputs:
  - name: tokenizer_json
    type: Model
    description: Path to tokenizer JSON file
  - name: model_py
    type: Data
    description: Path to model Python code file (or directory containing a single .py)
  - name: model_config
    type: Data
    description: Path to model config JSON file
  - name: learned_weights
    type: Model
    description: Path to learned model weights file
  - name: test_data_json
    type: String
    description: JSON array string (one-line) OR a path to a JSON file containing the array of prompts
  - name: max_new_tokens
    type: Integer
    default: "64"
    description: Maximum number of tokens to generate
  - name: temperature
    type: Float
    default: "1.0"
    description: Sampling temperature (higher = more random, lower = more deterministic)
  - name: top_k
    type: Integer
    default: "50"
    description: Number of top tokens to sample from (top-k sampling)
outputs:
  - name: inference_results
    type: String
    description: JSON file with generation results (list of {inference_input, inference_output})
implementation:
  container:
    image: nikhilv215/nesy-factory:v22
    command:
      - sh
      - -c
      - |
        set -e
        pip install tokenizers torch || true
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse, importlib.util, json, os, torch, shutil
        from tokenizers import Tokenizer
        import torch.nn.functional as F

        def find_model_py_file(directory):
            print(f"[DEBUG] Searching for .py file in: {directory}")
            if os.path.isfile(directory):
                print(f"[DEBUG] Path is already a file: {directory}")
                return directory
            if not os.path.isdir(directory):
                raise ValueError(f"Path {directory} is neither a file nor a directory")
            print(f"[DEBUG] Directory contents: {os.listdir(directory)}")
            py_files = [os.path.join(directory, f) for f in os.listdir(directory) if f.endswith(".py")]
            if not py_files:
                raise FileNotFoundError(f"No .py file found in directory {directory}")
            if len(py_files) > 1:
                print(f"[WARN] Multiple .py files found, using first: {py_files[0]}")
            print(f"[DEBUG] Selected .py file: {py_files[0]}")
            return py_files[0]

        def load_module_from_path(py_path, mod_name="gemma3_model"):
            if not py_path.endswith('.py'):
                print(f"[DEBUG] File {py_path} doesn't have .py extension, creating temporary .py file")
                temp_py_path = py_path + '.py'
                shutil.copyfile(py_path, temp_py_path)
                py_path = temp_py_path
                print(f"[DEBUG] Created temporary file: {py_path}")
            if not os.path.exists(py_path):
                raise FileNotFoundError(f"Model file not found: {py_path}")
            spec = importlib.util.spec_from_file_location(mod_name, py_path)
            if spec is None or spec.loader is None:
                raise ImportError(f"Cannot load module from: {py_path}")
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            return module

        parser = argparse.ArgumentParser()
        parser.add_argument("--tokenizer_json", type=str, required=True)
        parser.add_argument("--model_py", type=str, required=True)
        parser.add_argument("--model_config", type=str, required=True)
        parser.add_argument("--learned_weights", type=str, required=True)
        parser.add_argument("--test_data_json", type=str, required=True)
        parser.add_argument("--max_new_tokens", type=int, default=64)
        parser.add_argument("--temperature", type=float, default=1.0)
        parser.add_argument("--top_k", type=int, default=50)
        parser.add_argument("--inference_results", type=str, required=True)
        args = parser.parse_args()

        os.makedirs(os.path.dirname(args.inference_results) or ".", exist_ok=True)

        device = "cuda" if torch.cuda.is_available() else "cpu"
        torch_device = torch.device(device)
        model_dtype = torch.float16 if device == "cuda" else torch.float32

        tok = Tokenizer.from_file(args.tokenizer_json)
        bos_id = tok.token_to_id("<s>") or tok.token_to_id("<bos>")
        eos_id = tok.token_to_id("</s>") or tok.token_to_id("<eos>")

        with open(args.model_config, "r", encoding="utf-8") as f:
            cfg = json.load(f)
        cfg["dtype"] = model_dtype

        print(f"Finding model .py file...")
        model_py_path = find_model_py_file(args.model_py)
        print(f"Loading model code from: {model_py_path}")
        mod = load_module_from_path(model_py_path, "gemma3_model")
        Gemma3Model = getattr(mod, "Gemma3Model")

        model = Gemma3Model(cfg).to(torch_device)
        state = torch.load(args.learned_weights, map_location=torch_device)
        model.load_state_dict(state, strict=True)
        model.eval()

        context_len = int(cfg.get("context_length", 2048))

        def generate_text(prompt, max_new_tokens=64, temperature=1.0, top_k=50):
            ids = tok.encode(prompt).ids
            if bos_id is not None:
                ids = [bos_id] + ids
            x = torch.tensor([ids], dtype=torch.long, device=torch_device)
            for _ in range(max_new_tokens):
                with torch.no_grad():
                    model_output = model(x)[0]
                    logits = model_output[0, -1]
                logits = logits / temperature
                if top_k is not None:
                    indices_to_remove = logits < torch.topk(logits, top_k).values[-1]
                    logits[indices_to_remove] = -float("Inf")
                probs = F.softmax(logits, dim=-1)
                next_id = torch.multinomial(probs, 1).item()
                ids.append(next_id)
                if eos_id is not None and next_id == eos_id:
                    break
                if len(ids) > context_len:
                    ids = ids[-context_len:]
                x = torch.tensor([ids], dtype=torch.long, device=torch_device)
            dec_ids = ids[1:] if (bos_id is not None and len(ids) and ids[0] == bos_id) else ids
            return tok.decode(dec_ids)

        td = args.test_data_json
        test_data = None
        if os.path.exists(td) and os.path.isfile(td):
            with open(td, "r", encoding="utf-8") as fh:
                test_data = json.load(fh)
        else:
            test_data = json.loads(td)

        print(f"Processing {len(test_data)} test cases")

        results = []
        for idx, item in enumerate(test_data):
            # Handle both formats: string or [input, ground_truth] pair
            if isinstance(item, str):
                input_text = item
            elif isinstance(item, list) and len(item) > 0:
                input_text = item[0]  # Take first element as input
            else:
                input_text = str(item)
            
            generated_output = generate_text(input_text, args.max_new_tokens, args.temperature, args.top_k)
            result = {
                "inference_input": input_text,
                "inference_output": generated_output
            }
            results.append(result)
            print(f"[{idx}] Generated: {generated_output[:100]}...")

        with open(args.inference_results, "w", encoding="utf-8") as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
    args:
      - --tokenizer_json
      - {inputPath: tokenizer_json}
      - --model_py
      - {inputPath: model_py}
      - --model_config
      - {inputPath: model_config}
      - --learned_weights
      - {inputPath: learned_weights}
      - --test_data_json
      - {inputValue: test_data_json}
      - --max_new_tokens
      - {inputValue: max_new_tokens}
      - --temperature
      - {inputValue: temperature}
      - --top_k
      - {inputValue: top_k}
      - --inference_results
      - {outputPath: inference_results}
