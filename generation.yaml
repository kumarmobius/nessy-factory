name: Run Gemma3 Inference (Generation only)
description: |
  Loads Gemma3Model, generates text for multiple input prompts, and writes generation outputs to a JSON file.
  This task uses the same robust loading/generation logic as the example but does NOT compute ROUGE/BLEU or require ground-truth targets.
inputs:
  - name: tokenizer_json
    type: Model
    description: Path to tokenizer JSON file
  - name: model_py
    type: Data
    description: Path to model Python code file (or directory containing a single .py)
  - name: model_config
    type: Data
    description: Path to model config JSON file
  - name: learned_weights
    type: Model
    description: Path to learned model weights file
  - name: test_data_json
    type: String
    description: JSON string containing a list of input prompt strings, e.g. ["prompt1", "prompt2", ...]
  - name: max_new_tokens
    type: Integer
    default: "64"
    description: Maximum number of tokens to generate
  - name: temperature
    type: Float
    default: "1.0"
    description: Sampling temperature (higher = more random, lower = more deterministic)
  - name: top_k
    type: Integer
    default: "50"
    description: Number of top tokens to sample from (top-k sampling)
outputs:
  - name: inference_results
    type: String
    description: JSON file with generation results (list of {inference_input, inference_output})
implementation:
  container:
    image: nikhilv215/nesy-factory:v22
    command:
      - sh
      - -c
      - |
        set -e
        pip install tokenizers torch || true
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse, importlib.util, json, os, torch
        from tokenizers import Tokenizer
        import torch.nn.functional as F
        import shutil

        def find_model_py_file(directory):
            print(f"[DEBUG] Searching for .py file in: {directory}")
            if os.path.isfile(directory):
                print(f"[DEBUG] Path is already a file: {directory}")
                return directory
            if not os.path.isdir(directory):
                raise ValueError(f"Path {directory} is neither a file nor a directory")
            contents = os.listdir(directory)
            print(f"[DEBUG] Directory contents: {contents}")
            py_files = [os.path.join(directory, f) for f in contents if f.endswith('.py')]
            if not py_files:
                raise FileNotFoundError(f"No .py file found in directory {directory}")
            if len(py_files) > 1:
                print(f"[WARN] Multiple .py files found, using first: {py_files[0]}")
            print(f"[DEBUG] Selected .py file: {py_files[0]}")
            return py_files[0]

        def load_module_from_path(py_path, mod_name="gemma3_model"):
            if not py_path.endswith('.py'):
                temp_py_path = py_path + '.py'
                print(f"[DEBUG] Creating temporary .py file: {temp_py_path}")
                shutil.copyfile(py_path, temp_py_path)
                py_path = temp_py_path
            if not os.path.exists(py_path):
                raise FileNotFoundError(f"Model file not found: {py_path}")
            spec = importlib.util.spec_from_file_location(mod_name, py_path)
            if spec is None or spec.loader is None:
                raise ImportError(f"Cannot load module from: {py_path}")
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            return module

        parser = argparse.ArgumentParser()
        parser.add_argument("--tokenizer_json", type=str, required=True)
        parser.add_argument("--model_py", type=str, required=True)
        parser.add_argument("--model_config", type=str, required=True)
        parser.add_argument("--learned_weights", type=str, required=True)
        parser.add_argument("--test_data_json", type=str, required=True)
        parser.add_argument("--max_new_tokens", type=int, default=64)
        parser.add_argument("--temperature", type=float, default=1.0)
        parser.add_argument("--top_k", type=int, default=50)
        parser.add_argument("--inference_results", type=str, required=True)
        args = parser.parse_args()

        os.makedirs(os.path.dirname(args.inference_results) or ".", exist_ok=True)

        device = "cuda" if torch.cuda.is_available() else "cpu"
        torch_device = torch.device(device)
        model_dtype = torch.float16 if device == "cuda" else torch.float32

        print(f"[DEBUG] Loading tokenizer from: {args.tokenizer_json}")
        tok = Tokenizer.from_file(args.tokenizer_json)

        # robust bos/eos id resolution
        def token_id_any(tok, candidates):
            for c in candidates:
                tid = tok.token_to_id(c)
                if tid is not None:
                    return tid
            return None

        bos_id = token_id_any(tok, ["<s>", "<bos>"])
        eos_id = token_id_any(tok, ["</s>", "<eos>"])

        print(f"[DEBUG] bos_id={bos_id}, eos_id={eos_id}")

        with open(args.model_config, "r", encoding="utf-8") as f:
            cfg = json.load(f)
        cfg["dtype"] = model_dtype

        print(f"[DEBUG] Finding model .py file...")
        model_py_path = find_model_py_file(args.model_py)
        print(f"[DEBUG] Loading model code from: {model_py_path}")
        mod = load_module_from_path(model_py_path, "gemma3_model")
        Gemma3Model = getattr(mod, "Gemma3Model")

        print(f"[DEBUG] Instantiating model")
        model = Gemma3Model(cfg).to(torch_device)
        state = torch.load(args.learned_weights, map_location=torch_device)
        model.load_state_dict(state, strict=True)
        model.eval()

        context_len = int(cfg.get("context_length", 2048))

        def generate_text(prompt, max_new_tokens=64, temperature=1.0, top_k=50):
            ids = tok.encode(prompt).ids
            if bos_id is not None:
                ids = [bos_id] + ids
            x = torch.tensor([ids], dtype=torch.long, device=torch_device)

            for _ in range(max_new_tokens):
                with torch.no_grad():
                    model_output = model(x)[0]
                    logits = model_output[0, -1]

                logits = logits / (temperature if temperature > 0 else 1.0)

                if top_k is not None and top_k > 0:
                    kth = torch.topk(logits, min(top_k, logits.shape[-1])).values[-1]
                    indices_to_remove = logits < kth
                    logits[indices_to_remove] = -float("Inf")

                probs = F.softmax(logits, dim=-1)
                next_id = torch.multinomial(probs, 1).item()
                ids.append(next_id)

                if eos_id is not None and next_id == eos_id:
                    break

                if len(ids) > context_len:
                    ids = ids[-context_len:]
                x = torch.tensor([ids], dtype=torch.long, device=torch_device)

            dec_ids = ids[1:] if (bos_id is not None and len(ids) and ids[0] == bos_id) else ids
            return tok.decode(dec_ids)

        # test_data_json is expected to be a JSON list of prompt strings
        test_data = json.loads(args.test_data_json)
        if not isinstance(test_data, list):
            raise ValueError("test_data_json must be a JSON list of input prompt strings")

        print(f"[DEBUG] Processing {len(test_data)} prompts")

        results = []
        for idx, input_text in enumerate(test_data):
            try:
                generated_output = generate_text(input_text, args.max_new_tokens, args.temperature, args.top_k)
            except Exception as e:
                generated_output = f"[ERROR during generation: {e}]"
            result = {
                "inference_input": input_text,
                "inference_output": generated_output
            }
            results.append(result)
            print(f"[{idx+1}/{len(test_data)}] Generated (first 200 chars): {generated_output[:200]}")

        with open(args.inference_results, "w", encoding="utf-8") as f:
            json.dump(results, f, indent=2, ensure_ascii=False)

    args:
      - --tokenizer_json
      - {inputPath: tokenizer_json}
      - --model_py
      - {inputPath: model_py}
      - --model_config
      - {inputPath: model_config}
      - --learned_weights
      - {inputPath: learned_weights}
      - --test_data_json
      - {inputValue: test_data_json}
      - --max_new_tokens
      - {inputValue: max_new_tokens}
      - --temperature
      - {inputValue: temperature}
      - --top_k
      - {inputValue: top_k}
      - --inference_results
      - {outputPath: inference_results}
